import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
    ext.kotlin_version = '1.2.31'
    ext.arch_components_version = '1.1.1'

    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
        classpath 'com.automattic.android:fetchstyle:1.1'
    }
}

apply plugin: 'com.automattic.android.fetchstyle'

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

allprojects {
    apply plugin: 'checkstyle'

    repositories {
        google()
        jcenter()
        maven { url "https://dl.bintray.com/wordpress-mobile/maven" }
    }

    tasks.withType(Checkstyle) {
        source 'src'
        classpath = files()
    }

    task checkstyle(type: Checkstyle) {
    }

    task checkstyleChanged(type: Checkstyle) {
        def changedFiles = getChangedFiles()
        println project.name + ": " + changedFiles
        include changedFiles
    }

    checkstyle {
        toolVersion = '8.3'
        configFile file("${project.rootDir}/config/checkstyle.xml")
    }
}

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    configurations {
        ktlint
    }

    dependencies {
        ktlint 'com.github.shyiko:ktlint:0.21.0'
    }

    def inputFiles = project.fileTree(dir: "src", include: "**/*.kt")
    def outputDir = "${project.buildDir}/reports/ktlint/"

    task ktlintChanged(type: JavaExec) {
        def files = getChangedFiles()
        println project.name + ": " + files
        inputs.files(files)
        outputs.dir(outputDir)

        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "src/**/*.kt"
    }

    task ktlint(type: JavaExec) {
        inputs.files(inputFiles)
        outputs.dir(outputDir)

        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "src/**/*.kt"
    }

    task ktlintFormat(type: JavaExec) {
        inputs.files(inputFiles)
        outputs.dir(outputDir)

        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "-F", "src/**/*.kt"
    }
}

ext {
    fluxCVersion = 'd4e583f21840111065f12e743cbf31de4307266b'
}

static def getChangedFiles() {
    // Get the target and source branch
    def ghprbTargetBranch = System.getenv("ghprbTargetBranch")
    def ghprbSourceBranch = System.getenv("ghprbSourceBranch")

    // Compare to develop if no branch specified
    def targetBranch = ghprbTargetBranch ? "origin/${ghprbTargetBranch}" : "develop"
    def sourceBranch = ghprbSourceBranch ? "origin/${ghprbSourceBranch}" : ""

    // Get list of all changed files including status
    def systemOutStream = new ByteArrayOutputStream()
    def command = "git diff --name-status --diff-filter=dr $targetBranch $sourceBranch"
    command.execute().waitForProcessOutput(systemOutStream, System.err)
    def allFiles = systemOutStream.toString().trim().split('\n')
    systemOutStream.close()

    // Remove the status prefix
    Pattern statusPattern = Pattern.compile("(\\w)\\t+(.+)")
    List<String> files = new ArrayList<>()
    for (file in allFiles) {
        Matcher matcher = statusPattern.matcher(file)
        if (matcher.find()) {
            files.add(matcher.group(2))
        }
    }

    // Return the list of touched files
    files
}
